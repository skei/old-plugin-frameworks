{$include sphaera.inc}
unit fx_unmatched;

//----------------------------------------------------------------------
interface
//----------------------------------------------------------------------

uses
  s_const,
  s_types,
  s_plugin;

type

  myPlugin = class(SPlugin)
  private
    gain  : single;
    z0,z1 : longint;
    x0    : array[0..15] of single;
    y0    : array[0..15] of single;
    x1    : array[0..15] of single;
    y1    : array[0..15] of single;
    procedure   reset;
  public
    procedure   on_create; override;
    procedure   on_stateChange(AState:LongInt); override;
    procedure   on_parameterChange(AIndex:LongInt; AValue:Single); override;
    procedure   on_processSample(AInputs,AOutputs:PPSingle); override;
  end;

  SPHAERA_PLUGIN = myPLugin;

//----------------------------------------------------------------------
implementation
//----------------------------------------------------------------------

uses
  //s_math,
  s_parameter,
  s_util;

//----------

procedure myPlugin.on_create;
begin
  FName := 'fx_unmatched';
  FAuthor := 'tim goetze';
  FVersion := 0;
  FUniqueId := S_MAGIC + $0101;
  SSetFlag(FFlags,spf_perSample);
  FNumInputs  := 2;
  FNumOutputs := 2;
  appendParameter( SParameter.create('gain',1) );
  //
  gain := 1;
end;

//----------

procedure myPlugin.reset;
var
  i : longint;
begin
  for i := 0 to 15 do
  begin
    x0[i] := 0;
    y0[i] := 0;
    x1[i] := 0;
    y1[i] := 0;
  end;
  z0 := 0;
  z1 := 0;
end;

//----------

procedure myPlugin.on_stateChange(AState:LongInt);
begin
  case AState of
    sps_open:
      begin
        reset;
      end;
    sps_resume:
      begin
        reset;
      end;
  end;
end;

//----------

procedure myPlugin.on_parameterChange(AIndex:LongInt; AValue:Single);
var
  v : Single;
begin
  if AIndex = 0 then
  begin
    v := AValue;
    gain := v;
  end;
end;

//----------

procedure myPlugin.on_processSample(AInputs,AOutputs:PPSingle);
var
  //spl0,spl1 : single;
  z : longint;
  a : single;
begin
  //spl0 := AInputs[0]^;
  //spl1 := AInputs[1]^;

  z := z0;
  a := AInputs[0]^;//spl0;//*a_Inputs[0];
  x0[z] := a;
  //PROCESS0();
  a *= -0.0000186978325089078301339973881001199629;
  a += -0.0019343756431780716794482932741061631532 * x0[(z-1 ) and 15];
  a += +0.4882799441735049539303759047470521181822 * y0[(z-1 ) and 15];
  a += -0.0068581720709373307151568432971089350758 * x0[(z-2 ) and 15];
  a += +0.3391784486546852162014431542047532275319 * y0[(z-2 ) and 15];
  a += -0.0080712033745105205700953732161906373221 * x0[(z-3 ) and 15];
  a += +0.0041013313624351710115489844099556648871 * y0[(z-3 ) and 15];
  a += +0.0062425515113487175383744087753257190343 * x0[(z-4 ) and 15];
  a += -0.2937578593108242097642346379871014505625 * y0[(z-4 ) and 15];
  a += +0.0300330856260519092615357550357657601126 * x0[(z-5 ) and 15];
  a += -0.3135107132656380080071301108546322211623 * y0[(z-5 ) and 15];
  a += +0.0420998422314063230897929202001250814646 * x0[(z-6 ) and 15];
  a += -0.0941769772306991492794026044066413305700 * y0[(z-6 ) and 15];
  a += +0.0209068926357999021470313039117172593251 * x0[(z-7 ) and 15];
  a += +0.1218530135894568267040938280842965468764 * y0[(z-7 ) and 15];
  a += -0.0293365015269708810652371511196179199032 * x0[(z-8 ) and 15];
  a += +0.1605362805340295739853218037751503288746 * y0[(z-8 ) and 15];
  a += -0.0748650971084933170018871351203415542841 * x0[(z-9 ) and 15];
  a += +0.0105280663428685625215841525914584053680 * y0[(z-9 ) and 15];
  a += -0.0883889691308883534981433172106335405260 * x0[(z-10) and 15];
  a += -0.1946868621427640388965585316327633336186 * y0[(z-10) and 15];
  a += -0.0719149556841363057912985823350027203560 * x0[(z-11) and 15];
  a += -0.2560883692448795989626830760244047269225 * y0[(z-11) and 15];
  a += -0.0389244603189328741699171132495393976569 * x0[(z-12) and 15];
  a += -0.0719592227789066923859806479413236957043 * y0[(z-12) and 15];
  a += -0.0054345766014978463126494645507591485512 * x0[(z-13) and 15];
  a += +0.2253269103535170958529931795055745169520 * y0[(z-13) and 15];
  a += +0.0081937491360965508668812162795802578330 * x0[(z-14) and 15];
  a += +0.2589115724912437466187498102954123169184 * y0[(z-14) and 15];
  a += +0.0020664782446009415627086180933247305802 * x0[(z-15) and 15];
  a += -0.4263943664352933815564483666094020009041 * y0[(z-15) and 15];
  y0[z] := a;
  AOutputs[0]^ := a * gain;
  z := (z + 1) and 15;
  z0 := z;

  z := z1;
  a := AInputs[1]^;//spl1;//*a_Inputs[1];
  x1[z] := a;
  //PROCESS1();
  a *= -0.0000186978325089078301339973881001199629;
  a += -0.0019343756431780716794482932741061631532 * x1[(z-1 ) and 15];
  a += +0.4882799441735049539303759047470521181822 * y1[(z-1 ) and 15];
  a += -0.0068581720709373307151568432971089350758 * x1[(z-2 ) and 15];
  a += +0.3391784486546852162014431542047532275319 * y1[(z-2 ) and 15];
  a += -0.0080712033745105205700953732161906373221 * x1[(z-3 ) and 15];
  a += +0.0041013313624351710115489844099556648871 * y1[(z-3 ) and 15];
  a += +0.0062425515113487175383744087753257190343 * x1[(z-4 ) and 15];
  a += -0.2937578593108242097642346379871014505625 * y1[(z-4 ) and 15];
  a += +0.0300330856260519092615357550357657601126 * x1[(z-5 ) and 15];
  a += -0.3135107132656380080071301108546322211623 * y1[(z-5 ) and 15];
  a += +0.0420998422314063230897929202001250814646 * x1[(z-6 ) and 15];
  a += -0.0941769772306991492794026044066413305700 * y1[(z-6 ) and 15];
  a += +0.0209068926357999021470313039117172593251 * x1[(z-7 ) and 15];
  a += +0.1218530135894568267040938280842965468764 * y1[(z-7 ) and 15];
  a += -0.0293365015269708810652371511196179199032 * x1[(z-8 ) and 15];
  a += +0.1605362805340295739853218037751503288746 * y1[(z-8 ) and 15];
  a += -0.0748650971084933170018871351203415542841 * x1[(z-9 ) and 15];
  a += +0.0105280663428685625215841525914584053680 * y1[(z-9 ) and 15];
  a += -0.0883889691308883534981433172106335405260 * x1[(z-10) and 15];
  a += -0.1946868621427640388965585316327633336186 * y1[(z-10) and 15];
  a += -0.0719149556841363057912985823350027203560 * x1[(z-11) and 15];
  a += -0.2560883692448795989626830760244047269225 * y1[(z-11) and 15];
  a += -0.0389244603189328741699171132495393976569 * x1[(z-12) and 15];
  a += -0.0719592227789066923859806479413236957043 * y1[(z-12) and 15];
  a += -0.0054345766014978463126494645507591485512 * x1[(z-13) and 15];
  a += +0.2253269103535170958529931795055745169520 * y1[(z-13) and 15];
  a += +0.0081937491360965508668812162795802578330 * x1[(z-14) and 15];
  a += +0.2589115724912437466187498102954123169184 * y1[(z-14) and 15];
  a += +0.0020664782446009415627086180933247305802 * x1[(z-15) and 15];
  a += -0.4263943664352933815564483666094020009041 * y1[(z-15) and 15];
  y1[z] := a;
  AOutputs[1]^ := a * gain;
  z := (z + 1) and 15;
  z1 := z;
end;

//----------------------------------------------------------------------
end.

